#!/bin/bash

set -e

# Check for required dependency
if ! command -v az &> /dev/null; then
  echo "‚ùå Required dependency 'az' is not installed. Please install it first."
  exit 1
fi

# Directory to store logs
LOG_DIR="./logs"
mkdir -p "$LOG_DIR"

# Function to validate IP address with CIDR notation
validate_ip_cidr() {
  local ip_cidr="$1"
  
  if [[ ! "$ip_cidr" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$ ]]; then
    echo "‚ùå Invalid IP address format. Please use a valid IP with optional CIDR notation."
    return 1
  fi
  
  IFS='/' read -r ip cidr <<< "$ip_cidr"
  IFS='.' read -r -a octets <<< "$ip"
  for octet in "${octets[@]}"; do
    if [[ $octet -lt 0 || $octet -gt 255 ]]; then
      echo "‚ùå Invalid IP address. Octets must be between 0 and 255."
      return 1
    fi
  done
  
  if [[ -z "$cidr" ]]; then
    cidr=32
  fi
  
  if [[ $cidr -lt 0 || $cidr -gt 32 ]]; then
    echo "‚ùå Invalid CIDR notation. Must be between /0 and /32."
    return 1
  fi
  
  echo "$ip_cidr"
  return 0
}

# Sanitize and validate IP input
sanitize_ip_cidr() {
  local ip_cidr="$1"
  ip_cidr=$(echo "$ip_cidr" | tr -d ' ;')
  
  if [[ ! "$ip_cidr" =~ / ]]; then
    ip_cidr="${ip_cidr}/32"
  fi
  
  validate_ip_cidr "$ip_cidr"
}

# Log function in CSV format without timestamp
log_action() {
  local ip="$1"
  local developer="$2"
  local env="$3"
  local status="$4"
  local rule_name="$5"
  local logfile="$LOG_DIR/firewall_$(date +%Y-%m).log"

  # If file does not exist, add header
  if [ ! -f "$logfile" ]; then
    echo "IP,Developer,Environment,Status,RuleName" >> "$logfile"
  fi

  echo "$ip,$developer,$env,$status,$rule_name" >> "$logfile"
}

# Main script logic
main() {
  local RESOURCE_GROUP="$1"
  local SERVER_NAME="$2"
  local USER_IP="$3"
  local DEVELOPER="$4"
  local ENVIRONMENT="$5"

  if [ -z "$RESOURCE_GROUP" ] || [ -z "$SERVER_NAME" ] || [ -z "$USER_IP" ] || [ -z "$DEVELOPER" ] || [ -z "$ENVIRONMENT" ]; then
    echo "‚ùå Missing required arguments: RESOURCE_GROUP, SERVER_NAME, USER_IP, DEVELOPER, ENVIRONMENT"
    exit 1
  fi

  VALIDATED_IP=$(sanitize_ip_cidr "$USER_IP")
  if [ $? -ne 0 ]; then
    echo "‚ùå IP address validation failed"
    log_action "$USER_IP" "$DEVELOPER" "$ENVIRONMENT" "Failed" "N/A"
    exit 1
  fi

  IFS='/' read -r start_ip cidr <<< "$VALIDATED_IP"
  if [[ "$cidr" == "32" ]]; then
    END_IP="$start_ip"
    START_IP="$start_ip"
  else
    START_IP="$start_ip"
    END_IP="$start_ip"
  fi

  RULE_NAME="DevOpsAccess_$(date +%Y%m%d_%H%M%S)"

  echo "üìã Retrieving current firewall rules..."
  EXISTING_RULES=$(az sql server firewall-rule list \
    --resource-group "$RESOURCE_GROUP" \
    --server "$SERVER_NAME" \
    --query "[].name" -o tsv)

  echo "üìù Adding firewall rule for IP '$VALIDATED_IP'..."
  az sql server firewall-rule create \
    --resource-group "$RESOURCE_GROUP" \
    --server "$SERVER_NAME" \
    --name "$RULE_NAME" \
    --start-ip-address "$START_IP" \
    --end-ip-address "$END_IP"

  echo "‚úÖ Successfully added IP '$VALIDATED_IP' to server '$SERVER_NAME'"
  
  # Log the successful action
  log_action "$VALIDATED_IP" "$DEVELOPER" "$ENVIRONMENT" "Success" "$RULE_NAME"

  echo "üìç Current firewall rules:"
  az sql server firewall-rule list \
    --resource-group "$RESOURCE_GROUP" \
    --server "$SERVER_NAME" \
    --output table
}

main "$@"
