name: Add Database Firewall Rule

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev/qa/prod)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod
      developer_name:
        description: 'Developer name (e.g., john-doe)'
        required: true
        type: string
      ip_address:
        description: 'IP address to whitelist (e.g., 203.0.113.45 or 203.0.113.0/24)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  add-firewall-rule:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        run: |
          case "${{ inputs.environment }}" in
            dev|qa)
              echo "RESOURCE_GROUP=gvk-platform-rg" >> $GITHUB_ENV
              echo "SERVER_NAME=gvk-platform-sql" >> $GITHUB_ENV
              ;;
            prod)
              echo "RESOURCE_GROUP=rvc-platform-prod-db-rg" >> $GITHUB_ENV
              echo "SERVER_NAME=rvcplatform-prod-db" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac

      - name: Debug environment variables
        run: |
          echo "RESOURCE_GROUP=${RESOURCE_GROUP}"
          echo "SERVER_NAME=${SERVER_NAME}"
          echo "IP_ADDRESS=${{ inputs.ip_address }}"
          echo "DEVELOPER=${{ inputs.developer_name }}"

      - name: Add IP to database firewall
        run: |
          chmod +x cicd/updated-firewall.sh
          ./cicd/updated-firewall.sh \
            "${RESOURCE_GROUP}" \
            "${SERVER_NAME}" \
            "${{ inputs.ip_address }}" \
            "${{ inputs.developer_name }}" \
            "${{ inputs.environment }}"

      - name: Display current firewall rules
        run: |
          echo "âœ… Successfully added IP ${{ inputs.ip_address }} for ${{ inputs.developer_name }}"
          echo ""
          echo "Current firewall rules for ${SERVER_NAME}:"
          az sql server firewall-rule list \
            --resource-group "${RESOURCE_GROUP}" \
            --server "${SERVER_NAME}" \
            --output table

      - name: Display current log files for environment
        run: |
          LOG_DIR="$GITHUB_WORKSPACE/firewall_logs"
          echo "ðŸ“‚ Current log files for environment ${{ inputs.environment }}:"

          # Safe glob to avoid exit code 2 if no files exist
          shopt -s nullglob
          files=("$LOG_DIR/${{ inputs.environment }}_"*.log)
          if [ ${#files[@]} -eq 0 ]; then
            echo "- No log files found"
          else
            for f in "${files[@]}"; do
              echo "- $(basename "$f")"
            done
          fi
          shopt -u nullglob
