name: Install Argo CD on AKS with Automatic HTTPS

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  install-argocd:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- Azure Login via OIDC ---
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # --- Get AKS credentials ---
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
                                 --name ${{ secrets.AKS_CLUSTER_NAME }} \
                                 --file $KUBECONFIG --overwrite-existing
          kubectl config view

      # --- Test cluster connectivity ---
      - name: Test cluster connectivity
        run: |
          kubectl get nodes

      # --- Create Argo CD namespace ---
      - name: Create Argo CD namespace
        run: |
          NAMESPACE="gvk-argocd"
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      # --- Install Argo CD ---
      - name: Install Argo CD
        run: |
          NAMESPACE="gvk-argocd"
          kubectl apply -n $NAMESPACE -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      # --- Install Cert-Manager ---
      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager --timeout=180s
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager-webhook --timeout=180s
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager-cainjector --timeout=180s

      # --- Create ClusterIssuer for Let’s Encrypt ---
      - name: Create ClusterIssuer
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt
          spec:
            acme:
              email: ${{ secrets.LETSENCRYPT_EMAIL }}
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-private-key
              solvers:
                - http01:
                    ingress:
                      class: nginx
          EOF

      # --- Create Ingress for Argo CD ---
      - name: Apply Ingress
        run: |
          NAMESPACE="gvk-argocd"
          DOMAIN_NAME="gvk-platform"
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-server-ingress
            namespace: $NAMESPACE
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
              - host: $DOMAIN_NAME
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            number: 443
            tls:
              - hosts:
                  - $DOMAIN_NAME
                secretName: argocd-tls
          EOF

      # --- Wait for Argo CD server pod ---
      - name: Wait for Argo CD server
        run: |
          NAMESPACE="gvk-argocd"
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n $NAMESPACE --timeout=180s

      # --- Set custom admin password (fixed, no Docker) ---
      - name: Set Argo CD admin password
        run: |
          NAMESPACE="gvk-argocd"
          CUSTOM_PASSWORD="${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
          # Install htpasswd if needed
          sudo apt-get update && sudo apt-get install -y apache2-utils
          # Generate bcrypt hash
          HASH=$(htpasswd -bnBC 10 "" "$CUSTOM_PASSWORD" | tr -d ':\n')
          # Patch Argo CD secret
          kubectl -n $NAMESPACE patch secret argocd-secret \
            -p "{\"stringData\": {\"admin.password\": \"$HASH\", \"admin.passwordMtime\": \"$(date +%FT%T%Z)\"}}"
          echo "✅ Custom admin password set!"

      # --- Output login info ---
      - name: Output Argo CD URL
        run: |
          echo "🌐 Argo CD URL: https://gvk-platform"
          echo "🔑 Admin username: admin"
          echo "🔑 Admin password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
