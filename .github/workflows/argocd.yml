name: Configure Argo CD on AKS with HTTPS

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  argo-cd-setup:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      PUBLIC_DOMAIN: ${{ secrets.PUBLIC_DOMAIN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --file $KUBECONFIG --overwrite-existing
          kubectl config view

      - name: Verify AKS Cluster
        run: kubectl get nodes

      - name: Ensure Namespaces
        run: |
          kubectl create namespace gvk-argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -

      - name: Install NGINX Ingress
        run: |
          if ! kubectl get ns ingress-nginx >/dev/null 2>&1; then
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          fi
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=300s

      - name: Install Argo CD
        run: |
          if ! kubectl get deployment -n gvk-argocd argocd-server >/dev/null 2>&1; then
            kubectl apply -n gvk-argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          fi
          kubectl rollout status deployment/argocd-server -n gvk-argocd --timeout=300s

      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment/cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=180s

      - name: Apply ClusterIssuer
        run: |
          envsubst < .github/k8s/clusterissuer.yaml | kubectl apply -f -
          kubectl rollout status clusterissuer/letsencrypt --timeout=180s || true

      - name: Apply Argo CD Ingress
        run: |
          envsubst < .github/k8s/argocd-ingress.yaml | kubectl apply -f -

      - name: Wait for Argo CD Server Pod
        run: |
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n gvk-argocd --timeout=300s

      - name: Wait for TLS Certificate
        run: |
          kubectl wait --for=condition=Ready certificate/argocd-tls -n gvk-argocd --timeout=600s

      - name: Set Argo CD Admin Password
        run: |
          sudo apt-get update && sudo apt-get install -y apache2-utils
          HASH=$(htpasswd -bnBC 10 "" "${{ secrets.ARGOCD_ADMIN_PASSWORD }}" | tr -d ':\n')
          kubectl -n gvk-argocd patch secret argocd-secret \
            -p "{\"stringData\": {\"admin.password\": \"$HASH\", \"admin.passwordMtime\": \"$(date +%FT%T%Z)\"}}"

      - name: Update Azure DNS Record
        run: |
          DOMAIN=${{ secrets.PUBLIC_DOMAIN }}
          DNS_ZONE=${{ secrets.AZURE_DNS_ZONE }}
          RG=${{ secrets.AZURE_DNS_RESOURCE_GROUP }}
          IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          az network dns record-set a create -g "$RG" -z "$DNS_ZONE" -n "${DOMAIN%%.$DNS_ZONE}" --ttl 60 --if-none-match || true
          az network dns record-set a add-record -g "$RG" -z "$DNS_ZONE" -n "${DOMAIN%%.$DNS_ZONE}" -a "$IP" --ttl 60

      - name: Output Argo CD URL
        run: |
          echo "🌐 Argo CD URL: https://${{ secrets.PUBLIC_DOMAIN }}"
          echo "🔑 Username: admin"
          echo "🔑 Password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
