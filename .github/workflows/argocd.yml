name: Install Argo CD with Custom Admin Password & Automatic HTTPS

on:
  workflow_dispatch:

jobs:
  install-argocd:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Write kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $KUBECONFIG
          chmod 600 $KUBECONFIG
          kubectl config view

      - name: Test cluster connectivity
        run: |
          kubectl get nodes

      - name: Create Argo CD namespace
        run: |
          NAMESPACE="gvk-argocd"
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Argo CD
        run: |
          NAMESPACE="gvk-argocd"
          kubectl apply -n $NAMESPACE -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager --timeout=180s
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager-webhook --timeout=180s
          kubectl wait --for=condition=Available deployment -n cert-manager cert-manager-cainjector --timeout=180s

      - name: Create ClusterIssuer for Let’s Encrypt
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt
          spec:
            acme:
              email: ${{ secrets.LETSENCRYPT_EMAIL }}
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-private-key
              solvers:
                - http01:
                    ingress:
                      class: nginx
          EOF

      - name: Apply Ingress for Argo CD with HTTPS
        run: |
          NAMESPACE="gvk-argocd"
          DOMAIN_NAME="gvk-platform"
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-server-ingress
            namespace: $NAMESPACE
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
              - host: $DOMAIN_NAME
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            number: 443
            tls:
              - hosts:
                  - $DOMAIN_NAME
                secretName: argocd-tls
          EOF

      - name: Wait for Argo CD server pod
        run: |
          NAMESPACE="gvk-argocd"
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n $NAMESPACE --timeout=180s

      - name: Set custom admin password
        run: |
          NAMESPACE="gvk-argocd"
          CUSTOM_PASSWORD="${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
          HASH=$(docker run --rm -e PASSWORD="$CUSTOM_PASSWORD" xmartlabs/bcrypt-cli)
          kubectl -n $NAMESPACE patch secret argocd-secret \
            -p "{\"stringData\": {\"admin.password\": \"$HASH\", \"admin.passwordMtime\": \"$(date +%FT%T%Z)\"}}"
          echo "✅ Custom admin password set!"

      - name: Output login info
        run: |
          echo "🌐 Argo CD URL: https://gvk-platform"
          echo "🔑 Admin username: admin"
          echo "🔑 Admin password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
