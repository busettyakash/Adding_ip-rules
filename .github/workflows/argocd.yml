name: Configure Argo CD on AKS with HTTPS (Auto DNS + Webhook Fix)

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  argo-cd-prod:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      DOMAIN_NAME: ${{ secrets.PUBLIC_DOMAIN }}
      DNS_ZONE: ${{ secrets.AZURE_DNS_ZONE }}
      DNS_RG: ${{ secrets.AZURE_DNS_RESOURCE_GROUP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --file $KUBECONFIG --overwrite-existing

      - name: Verify cluster
        run: kubectl get nodes

      - name: Ensure namespaces
        run: |
          kubectl create ns gvk-argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl create ns cert-manager --dry-run=client -o yaml | kubectl apply -f -

      - name: Install NGINX Ingress
        run: |
          if ! kubectl get ns ingress-nginx >/dev/null 2>&1; then
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          fi
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=300s

      - name: Install Argo CD
        run: |
          if ! kubectl get deployment -n gvk-argocd argocd-server >/dev/null 2>&1; then
            kubectl apply -n gvk-argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          fi
          kubectl rollout status deployment/argocd-server -n gvk-argocd --timeout=300s

      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment/cert-manager -n cert-manager --timeout=300s
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=300s
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=300s

      # --- Wait for Cert-Manager Webhook Ready ---
      - name: Wait for Cert-Manager Webhook
        run: |
          echo "‚è≥ Waiting for cert-manager webhook to be ready..."
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=180s
          echo "‚úÖ Cert-manager webhook is ready."

      # --- Create ClusterIssuer for Let's Encrypt ---
      - name: Create ClusterIssuer
        run: |
          echo "üìú Creating ClusterIssuer for Let's Encrypt..."
          for i in {1..10}; do
            if cat <<EOF | kubectl apply -f -; then
              echo "‚úÖ ClusterIssuer applied successfully."
              exit 0
            else
              echo "‚ö†Ô∏è Retry applying ClusterIssuer (attempt $i)..."
              sleep 15
            fi
          done
          echo "‚ùå Failed to apply ClusterIssuer after multiple attempts."
          exit 1
          EOF
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt
          spec:
            acme:
              email: ${{ secrets.LETSENCRYPT_EMAIL }}
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-private-key
              solvers:
                - http01:
                    ingress:
                      class: nginx
          EOF

      - name: Create Argo CD Ingress
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-server-ingress
            namespace: gvk-argocd
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
              - host: $DOMAIN_NAME
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            number: 443
            tls:
              - hosts:
                  - $DOMAIN_NAME
                secretName: argocd-tls
          EOF
          kubectl rollout status deployment/argocd-server -n gvk-argocd --timeout=300s

      - name: Get LoadBalancer IP
        id: getip
        run: |
          echo "‚è≥ Waiting for ingress external IP..."
          for i in {1..20}; do
            IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "LB_IP=$IP" >> $GITHUB_ENV
              echo "‚úÖ Found LoadBalancer IP: $IP"
              exit 0
            fi
            sleep 30
          done
          echo "‚ùå Failed to get LoadBalancer IP"
          exit 1

      - name: Create/Update Azure DNS record
        run: |
          echo "üåÄ Updating Azure DNS A record for $DOMAIN_NAME"
          az network dns record-set a create \
            --zone-name $DNS_ZONE \
            --resource-group $DNS_RG \
            --name "@" \
            --ttl 60 --if-none-match || true
          az network dns record-set a add-record \
            --zone-name $DNS_ZONE \
            --resource-group $DNS_RG \
            --record-set-name "@" \
            --ipv4-address $LB_IP --ttl 60
          echo "‚úÖ DNS record created/updated"

      - name: Wait for DNS to resolve
        run: |
          echo "‚è≥ Waiting for $DOMAIN_NAME to resolve to $LB_IP"
          for i in {1..30}; do
            RESOLVED=$(dig +short $DOMAIN_NAME | tail -n1)
            if [ "$RESOLVED" = "$LB_IP" ]; then
              echo "‚úÖ DNS propagation complete"
              exit 0
            fi
            sleep 20
          done
          echo "‚ùå DNS did not resolve within expected time"
          exit 1

      - name: Wait for TLS certificate
        run: |
          kubectl wait --for=condition=Ready certificate/argocd-tls -n gvk-argocd --timeout=600s
          echo "‚úÖ TLS certificate ready"

      - name: Set Argo CD admin password
        run: |
          sudo apt-get update -y && sudo apt-get install -y apache2-utils
          HASH=$(htpasswd -bnBC 10 "" "${{ secrets.ARGOCD_ADMIN_PASSWORD }}" | tr -d ':\n')
          kubectl -n gvk-argocd patch secret argocd-secret \
            -p "{\"stringData\": {\"admin.password\": \"$HASH\", \"admin.passwordMtime\": \"$(date +%FT%T%Z)\"}}"
          echo "‚úÖ Admin password updated"

      - name: Output Argo CD URL
        run: |
          echo "üåê Open Argo CD: https://${DOMAIN_NAME}"
          echo "üîë Username: admin"
          echo "üîë Password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
